rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn(req) {
      return req.auth != null
    }

    function ownsNewResource(req) {
      return req.auth.uid == req.resource.data.ownerID
    }

    function accessToNewResource(req) {
      return (ownsNewResource(req) || req.auth.uid in req.resource.data.contributors)
   }

    function ownsExistingResource(req, res) {
      return req.auth.uid == res.data.ownerID
    }

   function accessToExistingResource(req, res) {
      return (ownsExistingResource(req,res) || req.auth.uid in res.data.contributors)
   }

   function invitedToList(req,res) {
      return req.resource.data.diff(res.data).affectedKeys().hasOnly(['contributors'])
   }

    function isNewInviter(req) {
      return req.auth.uid == req.resource.data.inviterID
    }

    function isExistingInviter(req, res) {
      return req.auth.uid == res.data.InviterID
    }

    match /lists/{list} {

      allow create: if
         isSignedIn(request) &&
         ownsNewResource(request)
      allow update: if
         isSignedIn(request) &&
         (
            (accessToNewResource(request) && accessToExistingResource(request,
            resource))
            ||
            invitedToList(request, resource)
         );
      allow delete: if
         isSignedIn(request) &&
         ownsExistingResource(request, resource);
      allow read: if
         isSignedIn(request) &&
         accessToExistingResource(request, resource);
    }

    match /{path=**}/items/{item} {
      // currently matches only item-level ownerID, but should also match
      // list-level contributors
      allow create: if
         isSignedIn(request) &&
         ownsNewResource(request)
      allow update: if
         isSignedIn(request) &&
         ownsNewResource(request) &&
         ownsExistingResource(request, resource);
      allow delete: if
         isSignedIn(request) &&
         ownsExistingResource(request, resource);
      allow read: if
         isSignedIn(request) &&
         ownsExistingResource(request, resource);
    }

    match /{path=**}/sections/{section} {

      allow create: if
         isSignedIn(request) &&
         ownsNewResource(request)
      allow update: if
         isSignedIn(request) &&
         ownsNewResource(request) &&
         ownsExistingResource(request, resource);
      allow delete: if
         isSignedIn(request) &&
         ownsExistingResource(request, resource);
      allow read: if
         isSignedIn(request) &&
         ownsExistingResource(request, resource);
    }

    match /invites/{invite} {
      allow create: if
         isSignedIn(request) &&
         isNewInviter(request)
      allow update: if
      	 isSignedIn(request) &&
         resource.data.status == "pending"
         // add resource.data.createdDate < today()-48h
      allow delete: if
         isSignedIn(request) &&
         isExistingInviter(request, resource);
      allow read: if
         isSignedIn(request)
    }
  }
}